
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000023e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  000002e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083a  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039f  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  9e:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:

void initADC(void);
void setup(void);

void setup(){
	DDRC = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~((1 << PC2) | (1 << PC3));
  aa:	97 b1       	in	r25, 0x07	; 7
  ac:	93 7f       	andi	r25, 0xF3	; 243
  ae:	97 b9       	out	0x07, r25	; 7
	PORTC |= (1 << PC2) | (1 << PC3);
  b0:	98 b1       	in	r25, 0x08	; 8
  b2:	9c 60       	ori	r25, 0x0C	; 12
  b4:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF;
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  b8:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF;
  ba:	84 b9       	out	0x04, r24	; 4
	UCSR0B = 0;
  bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	PCICR |= (1 << PCIE1);
  c0:	e8 e6       	ldi	r30, 0x68	; 104
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11) | (1 << PCINT10);
  ca:	ec e6       	ldi	r30, 0x6C	; 108
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	80 83       	st	Z, r24
	soytonto = 0;
  d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	sei();
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <initADC>:

	
}

void initADC(){
	ADMUX=0;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0);
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
	ADMUX |= ((1<<MUX2) | (1<<MUX1));
  ee:	80 81       	ld	r24, Z
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	80 83       	st	Z, r24
	ADCSRA = 0;
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	ADCSRA |= ((1<<ADEN) | (1<<ADIE));
  fa:	80 81       	ld	r24, Z
  fc:	88 68       	ori	r24, 0x88	; 136
  fe:	80 83       	st	Z, r24
	ADCSRA |= ((1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0));
 100:	80 81       	ld	r24, Z
 102:	87 60       	ori	r24, 0x07	; 7
 104:	80 83       	st	Z, r24
	DIDR0 =0;
 106:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 10a:	08 95       	ret

0000010c <__vector_21>:
	
	
	
}

ISR(ADC_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	
	ADCSRA &= ~(1<<ADIF);
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7e       	andi	r24, 0xEF	; 239
 124:	80 83       	st	Z, r24
	iADC = ADCH;
 126:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 12a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <iADC>
	idis1 = iADC & 0b00001111;
 12e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <iADC>
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <idis1>
	idis2 = iADC >> 4;
 138:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <iADC>
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <idis2>

}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_4>:

ISR(PCINT1_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	if (!(PINC & (1 << PC2))) {
 160:	32 99       	sbic	0x06, 2	; 6
 162:	05 c0       	rjmp	.+10     	; 0x16e <__vector_4+0x1a>
		iBina++;
 164:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <iBina>
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <iBina>
	}
	if (!(PINC & (1 << PC3))) {
 16e:	33 99       	sbic	0x06, 3	; 6
 170:	05 c0       	rjmp	.+10     	; 0x17c <__vector_4+0x28>
		iBina--;
 172:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <iBina>
 176:	81 50       	subi	r24, 0x01	; 1
 178:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <iBina>
	}
}
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:

int main(void)
{
    cli();
 188:	f8 94       	cli
	setup();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	initADC();
 18e:	0e 94 6e 00 	call	0xdc	; 0xdc <initADC>
	sei();
 192:	78 94       	sei
	
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	80 83       	st	Z, r24
		PORTB = iBina;
 19e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <iBina>
 1a2:	85 b9       	out	0x05, r24	; 5
		PORTC = (PORTC & 0b11111100) | ((iBina & 0b11000000) >> 6);
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <iBina>
 1aa:	92 95       	swap	r25
 1ac:	96 95       	lsr	r25
 1ae:	96 95       	lsr	r25
 1b0:	93 70       	andi	r25, 0x03	; 3
 1b2:	8c 7f       	andi	r24, 0xFC	; 252
 1b4:	89 2b       	or	r24, r25
 1b6:	88 b9       	out	0x08, r24	; 8

		if ((iBina < iADC))
 1b8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <iBina>
 1bc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <iADC>
 1c0:	98 17       	cp	r25, r24
 1c2:	20 f4       	brcc	.+8      	; 0x1cc <main+0x44>
		{
			soytonto = 0b10000000;
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1ca:	08 c0       	rjmp	.+16     	; 0x1dc <main+0x54>
		} else if ((iBina > iADC))
 1cc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <iBina>
 1d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <iADC>
 1d4:	89 17       	cp	r24, r25
 1d6:	10 f4       	brcc	.+4      	; 0x1dc <main+0x54>
		{
			soytonto = 0b00000000;
 1d8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		}
		PORTC |= ((1<<PC4));
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1<<PC5);
 1e2:	88 b1       	in	r24, 0x08	; 8
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	88 b9       	out	0x08, r24	; 8
		PORTD = (((lista[idis1]) & 0b01111111) | soytonto );
 1e8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <idis1>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	89 2b       	or	r24, r25
 1fc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x7a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x80>
 208:	00 00       	nop
		
		_delay_ms(4);
		PORTC |= ((1<<PC5));
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1<<PC4);
 210:	88 b1       	in	r24, 0x08	; 8
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	88 b9       	out	0x08, r24	; 8
		PORTD = ((lista[idis2] & 0b01111111) | soytonto);
 216:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <idis2>
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	80 81       	ld	r24, Z
 222:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 226:	8f 77       	andi	r24, 0x7F	; 127
 228:	89 2b       	or	r24, r25
 22a:	8b b9       	out	0x0b, r24	; 11
 22c:	8f e7       	ldi	r24, 0x7F	; 127
 22e:	9e e3       	ldi	r25, 0x3E	; 62
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xa8>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xae>
 236:	00 00       	nop
 238:	ad cf       	rjmp	.-166    	; 0x194 <main+0xc>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
