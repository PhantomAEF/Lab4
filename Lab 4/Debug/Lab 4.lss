
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cd  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000263  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile uint8_t iBina = 0;
void initADC(void);
void setup(void);

void setup(){
	DDRC = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~((1 << PC2) | (1 << PC3));
  94:	97 b1       	in	r25, 0x07	; 7
  96:	93 7f       	andi	r25, 0xF3	; 243
  98:	97 b9       	out	0x07, r25	; 7
	PORTC |= (1 << PC2) | (1 << PC3);
  9a:	98 b1       	in	r25, 0x08	; 8
  9c:	9c 60       	ori	r25, 0x0C	; 12
  9e:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF;
  a0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0;
  a2:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF;
  a4:	84 b9       	out	0x04, r24	; 4
	UCSR0B = 0;
  a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_4>:

	
}

ISR(PCINT1_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	if (!(PINC & (1 << PC2))) {
  ba:	32 99       	sbic	0x06, 2	; 6
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <__vector_4+0x1a>
		iBina++;
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (!(PINC & (1 << PC5))) {
  c8:	35 99       	sbic	0x06, 5	; 6
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <__vector_4+0x28>
		iBina--;
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:

int main(void)
{
    cli();
  e2:	f8 94       	cli
	setup();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	sei();
  e8:	78 94       	sei
	
    while (1) 
    {
		PORTB = iBina;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	85 b9       	out	0x05, r24	; 5
		PORTC = (PORTC & 0b11111100) | ((iBina & 0b11000000) >> 6);
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	92 95       	swap	r25
  f8:	96 95       	lsr	r25
  fa:	96 95       	lsr	r25
  fc:	93 70       	andi	r25, 0x03	; 3
  fe:	8c 7f       	andi	r24, 0xFC	; 252
 100:	89 2b       	or	r24, r25
 102:	88 b9       	out	0x08, r24	; 8
 104:	f2 cf       	rjmp	.-28     	; 0xea <main+0x8>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
